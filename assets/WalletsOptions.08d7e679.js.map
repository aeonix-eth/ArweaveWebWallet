{"version":3,"file":"WalletsOptions.08d7e679.js","sources":["../../src/components/composed/WalletOptions.vue","../../src/components/composed/WalletsOptions.vue"],"sourcesContent":["<template>\n\t<div class=\"wallet-options flex-column\">\n\t\t<div class=\"left\">\n\t\t\t<AddressIcon class=\"profile\" :address=\"wallet.key\" />\n\t\t\t<div class=\"profile-info\">\n\t\t\t\t<WalletInfo :wallet=\"wallet\" />\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"content flex-column\">\n\t\t\t<div v-if=\"wallet.hasPrivateKey\" class=\"flex-row\">\n\t\t\t\t<Select v-model=\"wallet.settings.securityLevel\" :options=\"securityOptions\" />\n\t\t\t</div>\n\t\t\t<div class=\"flex-row\">\n\t\t\t\t<Button v-if=\"addRelay\" :run=\"addRelay\" :icon=\"IconUpload\" :glow=\"glow\" color=\"var(--blue)\">Add Relay</Button>\n\t\t\t\t<Button v-if=\"wallet.download && !wallet.metadata.methods.download?.unavailable\" :icon=\"IconDownload\" @click=\"() => wallet.download()\">Backup Keyfile</Button>\n\t\t\t\t<Button :icon=\"IconX\" @click=\"deleteWallet(wallet)\">Delete</Button>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n\n\n<script setup lang=\"ts\">\nimport AddressIcon from '@/components/atomic/AddressIcon.vue'\nimport WalletInfo from '@/components/composed/WalletInfo.vue'\nimport Button from '@/components/atomic/Button.vue'\nimport Select from '@/components/form/Select.vue'\nimport { deleteWallet } from '@/functions/Wallets'\nimport { computed, onMounted, onUnmounted, ref } from 'vue'\nimport { coldState } from '@/store/Cold'\nimport { requestRelay } from '@/functions/Export'\n\nimport IconDownload from '@/assets/icons/download.svg?component'\nimport IconUpload from '@/assets/icons/share.svg?component'\nimport IconX from '@/assets/icons/x.svg?component'\nimport IconLock from '@/assets/icons/lock.svg?component'\nimport IconUnlock from '@/assets/icons/unlock.svg?component'\n\nconst props = defineProps<{\n\twallet: Wallet\n}>()\n\nconst securityOptions = [\n\t{ value: undefined, text: 'Unencrypted', icon: IconUnlock },\n\t{ value: 'inactivity', text: 'Encrypted - Lock when away', icon: IconLock },\n\t{ value: 'always', text: 'Encrypted - Always locked', icon: IconLock },\n]\nconst glow = ref(true)\nonMounted(async () => {\n\tconst unmount = new Promise<void>(res => onUnmounted(res))\n\tconst interval = setInterval(() => glow.value = !glow.value, 1000)\n\tawait unmount\n\tclearInterval(interval)\n})\nconst addRelay = computed(() => {\n\tif (!coldState.value?.status || !props.wallet.hasPrivateKey || props.wallet.state.hot) { return }\n\treturn () => requestRelay(props.wallet)\n})\n</script>\n\n\n\n<style scoped>\n.wallet-options {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.left {\n\tflex: 0 0 auto;\n\tdisplay: flex;\n\talign-items: center;\n}\n\n.content {\n\tflex: 1 1 auto;\n\tmin-width: 0;\n\toverflow: visible;\n}\n\n.bottom {\n\tborder-radius: var(--border-radius);\n}\n\n.profile {\n\tflex: 0 0 auto;\n\twidth: 92px;\n\theight: 92px;\n\tbackground: var(--background);\n\tborder-radius: var(--border-radius);\n\tpadding: 24px;\n}\n\n.profile-info {\n\tmin-width: 0;\n\tpadding: 0 var(--spacing);\n}\n</style>","<template>\n\t<div>\n\t\t<div class=\"flex-row\" style=\"justify-content: space-between; align-items: center\">\n\t\t\t<h2>Wallet{{ selectedWallets.length > 1 ? 's' : '' }}</h2>\n\t\t\t<TransitionsManager :fast=\"true\">\n\t\t\t\t<Link v-if=\"securityMismatch\" class=\"update-message\" :key=\"'' + hasNoTargetWallets + hasPassword\" @click=\"securityMismatchAction\" style=\"text-align: right;\">\n\t\t\t\t\t<Icon :icon=\"IconWarning\" style=\"vertical-align: text-top\" />\n\t\t\t\t\t<span v-if=\"hasNoTargetWallets\"> Select wallets to encrypt or click here to remove password</span>\n\t\t\t\t\t<span v-else-if=\"hasPassword\"> Click here to update encryption</span>\n\t\t\t\t\t<span v-else> Click here to create a new password</span>\n\t\t\t\t</Link>\n\t\t\t</TransitionsManager>\n\t\t</div>\n\t\t<div class=\"flex-column\">\n\t\t\t<template v-for=\"wallet in selectedWallets\" :key=\"wallet.id\">\n\t\t\t\t<WalletOptions :wallet=\"wallet\" />\n\t\t\t\t<Button v-if=\"canConnect\" @click=\"() => { sharedState.walletId = wallet.id; router.push('Connect') }\">Connect</Button>\n\t\t\t</template>\n\t\t</div>\n\t\t<Button v-if=\"!Wallets.length\" style=\"font-size:1.5em; background:var(--background3); width: 100%;\" :to=\"{ name: 'AddWallet' }\" icon=\"+\" />\n\t</div>\n</template>\n\n\n\n<script setup lang=\"ts\">\nimport WalletOptions from '@/components/composed/WalletOptions.vue'\nimport Button from '@/components/atomic/Button.vue'\nimport Icon from '@/components/atomic/Icon.vue'\nimport Link from '@/components/function/Link.vue'\nimport TransitionsManager from '@/components/visual/TransitionsManager.vue'\nimport { notify } from '@/store/NotificationStore'\nimport { Wallets } from '@/functions/Wallets'\nimport { state } from '@/functions/Channels'\nimport { sharedState } from '@/functions/Connect'\nimport { hasPassword, setPassword, hasUpdate, updateEncryption, hasNoTargetWallets } from '@/functions/Password'\nimport { computed, watch } from 'vue'\nimport { onBeforeRouteLeave, useRoute, useRouter } from 'vue-router'\n\nimport IconWarning from '@/assets/icons/shield_warning.svg?component'\n\nconst route = useRoute()\nconst router = useRouter()\n\nconst selectedWallets = computed(() => {\n\tconst editWallet = route.query.wallet\n\tif (!editWallet) { return Wallets.value }\n\tconst editWalletArray = Array.isArray(editWallet) ? editWallet : [editWallet]\n\treturn Wallets.value.filter(wallet => editWalletArray.includes(wallet.id + ''))\n})\nconst canConnect = computed(() => ['popup', 'iframe', 'ws'].includes(state.value.type!) && !sharedState.value?.walletId)\nconst securityMismatch = computed(() => hasUpdate.value || hasNoTargetWallets.value)\nconst securityMismatchAction = computed(() => {\n\tif (hasNoTargetWallets.value) { return () => setPassword('') }\n\tif (hasUpdate.value) { return hasPassword.value ? () => updateEncryption() : () => setPassword('', true) }\n})\n\nlet notificationClose: Function | undefined\nonBeforeRouteLeave(() => {\n\tif (!securityMismatch.value) { return }\n\tconst { promise, close } = notify.confirm({ title: 'Security changes are not applied', body: 'Are you sure you want to leave this page?' })\n\tif (notificationClose) { notificationClose() }\n\tnotificationClose = close\n\twatch(hasUpdate, value => value && close())\n\treturn promise\n})\n</script>\n\n\n\n<style scoped>\n.update-message {\n\tcolor: var(--red);\n}\n</style>"],"names":[],"mappings":"8rBA2CM,EAAkB,CACvB,CAAE,MAAO,OAAW,KAAM,cAAe,KAAM,CAAW,EAC1D,CAAE,MAAO,aAAc,KAAM,6BAA8B,KAAM,CAAS,EAC1E,CAAE,MAAO,SAAU,KAAM,4BAA6B,KAAM,CAAS,CAAA,EAEhE,EAAO,EAAI,EAAI,EACrB,EAAU,SAAY,CACrB,KAAM,GAAU,GAAI,SAAc,AAAO,GAAA,EAAY,CAAG,CAAC,EACnD,EAAW,YAAY,IAAM,EAAK,MAAQ,CAAC,EAAK,MAAO,GAAI,EAC3D,KAAA,GACN,cAAc,CAAQ,CAAA,CACtB,EACK,KAAA,GAAW,EAAS,IAAM,CAC3B,GAAA,GAAC,EAAU,OAAO,QAAU,CAAC,EAAM,OAAO,eAAiB,EAAM,OAAO,MAAM,KAC3E,MAAA,IAAM,EAAa,EAAM,MAAM,CAAA,CACtC,0hCCjBD,KAAM,GAAQ,IACR,EAAS,IAET,EAAkB,EAAS,IAAM,CAChC,KAAA,GAAa,EAAM,MAAM,OAC/B,GAAI,CAAC,EAAc,MAAO,GAAQ,MAClC,KAAM,GAAkB,MAAM,QAAQ,CAAU,EAAI,EAAa,CAAC,CAAU,EACrE,MAAA,GAAQ,MAAM,OAAO,AAAA,GAAU,EAAgB,SAAS,EAAO,GAAK,EAAE,CAAC,CAAA,CAC9E,EACK,EAAa,EAAS,IAAM,CAAC,QAAS,SAAU,IAAI,EAAE,SAAS,EAAM,MAAM,IAAK,GAAK,CAAC,EAAY,OAAO,QAAQ,EACjH,EAAmB,EAAS,IAAM,EAAU,OAAS,EAAmB,KAAK,EAC7E,EAAyB,EAAS,IAAM,CAC7C,GAAI,EAAmB,MAAgB,MAAA,IAAM,EAAY,EAAE,EAC3D,GAAI,EAAU,MAAgB,MAAA,GAAY,MAAQ,IAAM,EAAA,EAAqB,IAAM,EAAY,GAAI,EAAI,CAAE,CACzG,EAEG,GAAA,GACJ,SAAmB,IAAM,CACpB,GAAA,CAAC,EAAiB,MAAS,OACzB,KAAA,CAAE,UAAS,SAAU,GAAO,QAAQ,CAAE,MAAO,mCAAoC,KAAM,2CAA6C,CAAA,EAC1I,MAAI,IAAuC,IACvB,EAAA,EACpB,GAAM,EAAW,AAAA,GAAS,GAAS,EAAO,CAAA,EACnC,CAAA,CACP"}